<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uans3k Home</title>
    <description></description>
    <link>http://uans3k.github.io/</link>
    <atom:link href="http://uans3k.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 Aug 2021 10:42:05 +0800</pubDate>
    <lastBuildDate>Tue, 17 Aug 2021 10:42:05 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>λ-calculus</title>
        <description>&lt;h1 id=&quot;λ-calculus&quot;&gt;λ-calculus&lt;/h1&gt;

&lt;h2 id=&quot;1-定义&quot;&gt;1 定义&lt;/h2&gt;
&lt;p&gt;语法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;exp ::= aexp | cexp&lt;br /&gt;
aexp ::= x | λx.exp&lt;br /&gt;
cexp ::= (exp exp)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$\alpha$等价&lt;br /&gt;
自由参数不影响exp的等价&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;λx.x == λy.y&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$\beta$规约&lt;br /&gt;
cexp应用时会将第一个exp中的自由参数替换为第二个exp&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;(λx.λy.exp a)=λy.exp[x:=a]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-咖喱化-curring&quot;&gt;2 咖喱化 (curring)&lt;/h2&gt;
&lt;p&gt;通过咖喱化可以定义多变量λ演算&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;λ(x y).exp:= λx.(λy.exp)) = λx.λy.exp&lt;br /&gt;
(λ(x y).exp a b)=(λx.λy.exp a b)=exp&lt;br /&gt;
(λ(x y).exp a)=(λx.λy.exp a)=λy.exp[x:=a]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-谓词与逻辑&quot;&gt;3 谓词与逻辑&lt;/h2&gt;
&lt;h3 id=&quot;bool算子&quot;&gt;bool算子&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;true := λ(a b).a&lt;br /&gt;
false := λ(a b).b&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;与运算&quot;&gt;与运算&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;and:= λ(a b).(a b false)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:   &lt;br /&gt;
(and true true)=(true true false)=true &lt;br /&gt;
(and false false)= (false false false)=false&lt;br /&gt;
(and true false)= (true false false)=false&lt;br /&gt;
(and false true)= (false true false)=false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;或运算&quot;&gt;或运算&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;or:= λ(a b).(a true b)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(or true true) = (true true false)= true&lt;br /&gt;
(or true false) = (true true false)= false &lt;br /&gt;
(or false false) = (flase true false)= false &lt;br /&gt;
(or false true) = (flase true false)= false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;否运算&quot;&gt;否运算&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;not:= λa.(a false true) &lt;br /&gt;
example:&lt;br /&gt;
(not true)= (true false true)=false 
(not false)= (false false true)=false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;异或运算&quot;&gt;异或运算&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;xor:= λ(a b).(or (and (not a) b) (and a (not b))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(xor true false)=(or (and (not true) false) (and true (not false))= true &lt;br /&gt;
(xor true true)=(or (and (not true) true) (and true (not true))= fasle&lt;br /&gt;
(xor false false)=(or (and (not false) false) (and false (not false))= fasle&lt;br /&gt;
(xor false true)=(or (and (not false) true) (and false (not true))= true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;条件选择&quot;&gt;条件选择&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;if:=λ(t a b).(t a b)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example: &lt;br /&gt;
(if false a b)=(false a b)=b
(if true a b)=(true a b)=a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-有序对与列表&quot;&gt;4 有序对与列表&lt;/h2&gt;
&lt;h3 id=&quot;有序对&quot;&gt;有序对&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;[a b]:=λt.(if t a b)&lt;br /&gt;
car:=λp.(p true) &lt;br /&gt;
cdr:=λp.(p false)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:   &lt;br /&gt;
(car [a b])=(λt.(if t a b) true)=a &lt;br /&gt;
(cdr [a b])=(λt.(if t a b) flase)=b&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;列表&quot;&gt;列表&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;[a b c]:=[a [b c]]=λt.(if t a λt2.(if t2 b c))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(car [a b c])=(car [a [b c]])=a&lt;br /&gt;
(cdr [a b c])=(cdr [a [b c]])=[b c]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-自然数&quot;&gt;5 自然数&lt;/h2&gt;

&lt;h3 id=&quot;自然数算子&quot;&gt;自然数算子&lt;/h3&gt;
&lt;p&gt;相当于将operator 作用在 operand n次&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0:= λ(f x).x&lt;br /&gt;
1:= λ(f x).(f x)&lt;br /&gt;
2:= λ(f x).(f (f x))&lt;br /&gt;
…&lt;br /&gt;
n:= λ(f x).(f^n x)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;后继&quot;&gt;后继&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;succ:= λa.(λ(b c).(b (a b c))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example: &lt;br /&gt;
(succ n)=λ(b c).(b (n b c))&lt;br /&gt;
=λ(b c).(b (b^n c))&lt;br /&gt;
=λ(b c).(b^{(n+1)} c)=n+1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;加法&quot;&gt;加法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;plus:= λ(m n).λ(a b).(m a (n a b))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example: &lt;br /&gt;
(plus m n)=λ(a b).(m a (n a b))=λ(a b).(m a (a^n b))&lt;br /&gt;
=(a^m (a^n b))=(a^{m+n} b)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;zero比较&quot;&gt;zero比较&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;zero?:=λa.((a false not) false))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(zero? 2)=((2 false not) false)=(1 false false)=false&lt;br /&gt;
(zero? 0)=((0 false not) false)=(not false)=true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前继&quot;&gt;前继&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;succ_{pair}:=λa.[(succ (car a)) (if (zero? (car a)) (cdr a) (succ (cdr a)))]&lt;br /&gt;
pred:=λa.(cdr (a succ_{pair} [0 0]))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(succ_{pair} [0 0])=[(succ 0) (if (zero? 0) 0 1))]=[1 0]&lt;br /&gt;
(succ_{pair} [1 0])=[(succ 1) (if (zero? 1) 0 1))]=[2 1]&lt;br /&gt;
 …&lt;br /&gt;
(succ_{pair} [n-1,n-2])=[(succ n-1) (if (zero? n-1) n-2 n-1))]=[n n-1]&lt;br /&gt;
(pred n)=(cdr (n succ_{pair} [0 0]))=(cdr [n n-1])=n-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;减法&quot;&gt;减法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;sub:= λ(m n).(n pred m)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example: &lt;br /&gt;
(sub m n)=(n-1 pred m-1)=…=(0 pred m-n)=m-n&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;乘法&quot;&gt;乘法&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;mult:= λ(m n).λ(a b).(m (n a c) b)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:&lt;br /&gt;
(mult m n)=λ(a b).(m (n a) b)&lt;br /&gt;
 =λ(a b).(m-1 (n a) (a^n b))=…=λ(a b).(a^{m&lt;em&gt;n} b)=m&lt;/em&gt;n&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;指数&quot;&gt;指数&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;exp:= λ(m n).λ(a b).(n a (m a b))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;自然数比较&quot;&gt;自然数比较&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;ge?:= λ(m n).(zero? (sub n m))&lt;br /&gt;
le?:= λ(m n).(zero? (sub m n))&lt;br /&gt;
equal?:= λ(m n).(and (ge? m n) (ge? n m))&lt;br /&gt;
g?:= λ(m n).(and (ge? m n) (not (equal? m n)))&lt;br /&gt;
l?:= λ(m n).(and (le? m n) (not (equal? m n)))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;6-let-bound&quot;&gt;6 Let-Bound&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;let x=M in N:= ((λx.N) M)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;7-迭代&quot;&gt;7 迭代&lt;/h2&gt;
&lt;h3 id=&quot;不动点算子-y组合子悖论算子&quot;&gt;不动点算子 (Y组合子,悖论算子)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Y := λg.(λx.(g (x x)) λx.(g (x x)))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example: &lt;br /&gt;
(Y g)=(g (λx.(g (x x)) λx.(g (x x))))&lt;br /&gt;
=(g (λf.(λx.(f (x x)) λx.(f (x x))) g))=(g (Y g))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样对于任意$f$,令$g=(Y f)$则$f(g)=g$,$g$称为$f$的不动点，用不动点算子可以构造任意算子的不动点&lt;/p&gt;

&lt;h3 id=&quot;利用y算子构建递归函数&quot;&gt;利用Y算子构建递归函数&lt;/h3&gt;

&lt;h4 id=&quot;阶乘函数fact&quot;&gt;阶乘函数fact&lt;/h4&gt;
&lt;p&gt;辅助函数 A&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A:=λf.(λn.((zero? n) 1 (mult n (f (pred n)))))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们需要找到$f$让$f=(A\ f)$,这样&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(A f n)= (mult n (f n-1))=(mult n ((A f) n-1))=…=n!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;利用Y算子我们知道$f=(Y A)$,这样我们就能构造fact函数为&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;fact:= (A (Y A))=(Y A)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:  &lt;br /&gt;
(fact n)=(Y A n)=(A (Y A) n)=(mult n (Y A n-1))=…=n!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;任意递归函数g&quot;&gt;任意递归函数g&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;g:=(Y λf.M)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;example:  &lt;br /&gt;
(g x)=(Y λf.M x)=(λf.M (Y λf.M) x)=(M[f=λf.M] x)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 10 Aug 2021 00:00:00 +0800</pubDate>
        <link>http://uans3k.github.io/2021/08/10/%CE%BB-calculus/</link>
        <guid isPermaLink="true">http://uans3k.github.io/2021/08/10/%CE%BB-calculus/</guid>
        
        <category>计算性</category>
        
        <category>函数式</category>
        
        <category>程序语言设计</category>
        
        
      </item>
    
  </channel>
</rss>
